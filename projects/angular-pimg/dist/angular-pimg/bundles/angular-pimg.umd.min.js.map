{"version":3,"sources":["ng://angular-pimg/lib/angular-pimg.service.ts","ng://angular-pimg/lib/angular-pimg.component.ts","ng://angular-pimg/lib/angular-pimg.module.ts"],"names":["AngularPimgService","options","this","setConfig","Object","defineProperty","prototype","_wrapperClassName","_buttonClassName","_className","_placeholderClassName","_dataSaver","_fetchOnDemand","_a","className","dataSaver","fetchOnDemand","placeholderClassName","buttonClassName","wrapperClassName","Injectable","args","providedIn","Optional","type","Inject","AngularPimgComponent","el","domSanitizer","display","EventEmitter","x","insertInput","setUp","setFetchOnDemand","_this","observer","IntersectionObserver","entries","isIntersecting","fetchImage","console","log","delayed","disconnect","observe","nativeElement","fetch","src","then","res","blob","bypassSecurityTrustUrl","URL","createObjectURL","loading","fetched","emit","catch","err","error","ngOnChanges","changes","props","prop","findIndex","val","this_1","isUndefined","currentValue","isObject","includes","placeholder","replace","classes","Component","selector","template","styles","ElementRef","DomSanitizer","Input","Output","AngularPimgModule","parentModule","Error","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","decorators","SkipSelf"],"mappings":"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","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\nimport { AngularPimgOptions } from './config-options';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularPimgService {\n  private _className: string;\n  private _placeholderClassName = 'pimg__placeholder';\n  private _fetchOnDemand = false;\n  private _dataSaver: boolean;\n  private _buttonClassName = 'pimg_btn';\n  private _wrapperClassName = 'pimg_wrapper';\n\n  constructor(@Optional() @Inject('Options') options: AngularPimgOptions) {\n    if (options) {\n      this.setConfig(options);\n    }\n  }\n\n  get wrapperClassName(): string {\n    return this._wrapperClassName;\n  }\n\n  get buttonClassName(): string {\n    return this._buttonClassName;\n  }\n\n  get className(): string {\n    return this._className;\n  }\n\n  get placeholderClassName(): string {\n    return this._placeholderClassName;\n  }\n\n  get dataSaver(): boolean {\n    return this._dataSaver;\n  }\n\n  get fetchOnDemand(): boolean {\n    return this._fetchOnDemand;\n  }\n\n  setConfig({ className, dataSaver, fetchOnDemand, placeholderClassName }: Partial<AngularPimgOptions>) {\n    this._className = typeof className !== 'undefined' ? className : this.className;\n    this._fetchOnDemand = typeof fetchOnDemand !== 'undefined' ? fetchOnDemand : this.fetchOnDemand;\n    this._placeholderClassName = typeof placeholderClassName !== 'undefined' ? placeholderClassName : this.placeholderClassName;\n    if (typeof dataSaver === 'undefined') {\n      return;\n    }\n    if (typeof dataSaver === 'object') {\n      this._buttonClassName = dataSaver.buttonClassName;\n      this._wrapperClassName = dataSaver.wrapperClassName;\n    } else {\n      this._dataSaver = true; // dataSaver is true\n    }\n  }\n\n}\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, ElementRef } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { AngularPimgService } from './angular-pimg.service';\nimport { AngularPimgOptions } from './config-options';\n\n@Component({\n  selector: 'angular-pimg',\n  template: `<div [ngClass]=\"wrapperClassName\" *ngIf=\"(dataSaver && loading) || delayed; else loadingContent\">\n  <img [ngClass]=\"classes\" [ngStyle]=\"style\" [src]=\"placeholder\" />\n  <button [ngClass]=\"buttonClassName\" (click)=\"fetchImage()\">\n    Load image\n  </button>\n</div>\n<ng-template #loadingContent>\n  <img *ngIf=\"loading; else otherContent\" [ngClass]=\"placeholderClassName\" [ngStyle]=\"style\" [src]=\"placeholder\" />\n  <ng-template #otherContent>\n    <img [ngStyle]=\"style\" [ngClass]=\"classes\" [src]=\"blob\" />\n  </ng-template>\n</ng-template>`,\n  styles: []\n})\nexport class AngularPimgComponent implements OnChanges {\n  @Input() dataSaver: any;\n  @Input() src: string;\n  @Input() fetchOnDemand: boolean;\n  @Input() placeholder: string;\n  @Input() placeholderClassName: string;\n  @Input() className: string;\n  @Input() style: any = { display: 'block' };\n  @Output() fetched: EventEmitter<null> = new EventEmitter();\n  @Output() error: EventEmitter<any> = new EventEmitter();\n  wrapperClassName = '';\n  buttonClassName = '';\n  blob: SafeUrl = '';\n  delayed: boolean;\n  loading: boolean;\n  classes: string;\n  private isIntersecting = false;\n\n  constructor(private el: ElementRef, private domSanitizer: DomSanitizer, private options: AngularPimgService) {\n    this.insertInput();\n    this.setUp();\n  }\n\n  setFetchOnDemand() {\n    const observer = new IntersectionObserver(entries => {\n      const image = entries[0];\n      if (image.isIntersecting && !this.isIntersecting) {\n        this.fetchImage();\n        this.isIntersecting = true;\n        console.log('Called by intersection API');\n        this.delayed = false;\n        observer.disconnect();\n      }\n    });\n    observer.observe(this.el.nativeElement);\n  }\n\n  fetchImage() {\n    fetch(this.src)\n      .then(res => res.blob())\n      .then(res => {\n        console.log(res);\n        this.blob = this.domSanitizer.bypassSecurityTrustUrl(URL.createObjectURL(res));\n        this.loading = false;\n        this.isIntersecting = false;\n        this.delayed = false;\n        this.fetched.emit();\n      })\n      .catch(err => {\n        this.error.emit(err);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const newValues: any = {};\n    const props = ['src', 'fetchOnDemand', 'placeholder', 'placeholderClassName', 'className', 'style'];\n    for (const prop in changes) {\n      if (props.findIndex(val => val === prop) > 0 && !this.isUndefined(changes[prop].currentValue)) {\n        console.log(`${prop} is not undefined. It has changed`);\n        this[prop] = changes[prop].currentValue;\n      } else {\n        if (prop === 'dataSaver' && this.isObject(changes[prop])) {\n          this.buttonClassName = changes[prop].currentValue.buttonClassName;\n          this.placeholderClassName = changes[prop].currentValue.placeholderClassName;\n        }\n      }\n    }\n    this.setUp();\n    // changes.dataSaver ? newValues.dataSaver = changes.dataSaver.currentValue : null;\n    // changes.src ? newValues.src = changes.src.currentValue : null;\n    // changes.fetchOnDemand ? newValues.fetchOnDemand = changes.fetchOnDemand.currentValue : null;\n    // changes.placeholder ? newValues.placeholder = changes.placeholder.currentValue : null;\n    // changes.placeholderClassName ? newValues.placeholderClassName = changes.placeholderClassName.currentValue : null;\n    // changes.class ? newValues.class = changes.class.currentValue : null;\n    // changes.style ? newValues.style = changes.style.currentValue : null;\n  }\n\n  insertInput() {\n    // Called on initialization; Set the default configuration options if option is not present\n    console.log('Config options', this.options);\n    if (this.isUndefined(this.fetchOnDemand)) {\n      this.fetchOnDemand = this.options.fetchOnDemand;\n    }\n    if (this.isUndefined(this.placeholderClassName)) {\n      this.placeholderClassName = this.options.placeholderClassName;\n    }\n    if (this.isUndefined(this.dataSaver)) {\n      this.dataSaver = this.options.dataSaver;\n    }\n    if (this.isUndefined(this.className)) {\n      this.className = this.options.className;\n    }\n    if (this.isObject(this.dataSaver)) {\n      // set buttonClassName and wrapperClassName\n      this.buttonClassName = this.dataSaver.buttonClassName;\n      this.wrapperClassName = this.dataSaver.wrapperClassName;\n    } else {\n      this.buttonClassName = this.options.buttonClassName;\n      this.wrapperClassName = this.options.wrapperClassName;\n    }\n  }\n\n  setUp() {\n    if (this.dataSaver) {\n      this.delayed = true;\n    } else if (this.fetchOnDemand) {\n      this.loading = true;\n      this.setFetchOnDemand();\n    } else {\n      this.fetchImage();\n      console.log('Fetching image, due to config', this.dataSaver);\n    }\n    if (this.src && this.src.includes('cloudinary')) {\n      this.placeholder =\n        this.placeholder || this.src.replace('/upload/', '/upload/c_thumb,w_30/');\n    }\n    this.classes = `${this.className} ${this.placeholderClassName}`;\n  }\n\n  isObject = x => typeof x === 'object';\n  isUndefined = x => typeof x === 'undefined';\n\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { AngularPimgComponent } from './angular-pimg.component';\nimport { AngularPimgService } from './angular-pimg.service';\nimport { AngularPimgOptions } from './config-options';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [AngularPimgComponent],\n  exports: [AngularPimgComponent]\n})\nexport class AngularPimgModule {\n  constructor(@Optional() @SkipSelf() parentModule: AngularPimgModule) {\n    if (parentModule) {\n      throw new Error('The Angular Pimg Module is already loaded. Import it only in your AppModule');\n    }\n  }\n  static forRoot(options?: Partial<AngularPimgOptions>): ModuleWithProviders {\n    return {\n      ngModule: AngularPimgModule,\n      providers: [\n        AngularPimgService,\n        { provide: 'Options', useValue: options }\n      ]\n    };\n  }\n}\n"]}